#line 1 "scanner.cpp"

#line 3 "scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 88
#define YY_END_OF_BUFFER 89
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[416] =
    {   0,
        0,    0,   89,   87,   84,   86,   85,   77,   87,   60,
       87,   87,   64,   65,   81,   79,   57,   80,   58,   82,
        4,   59,   70,   61,   72,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   55,   56,   83,   66,   87,   67,    0,   69,
        0,    0,    8,   75,    0,   62,   63,    0,    0,    4,
        0,   71,   68,   73,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   26,   54,   54,   54,   54,   74,   76,   78,

        6,    0,    2,    5,    0,    0,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,    3,   54,   54,
       54,   54,   54,   33,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   28,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   27,   54,   54,    7,   54,   54,
       22,   54,   54,   54,   54,   54,   16,   54,   54,   54,

       54,   54,   54,   54,   11,   54,   54,    7,    7,   54,
       36,   54,   54,   54,   54,   54,   53,   54,   54,   54,
       54,   54,   54,   54,   54,   34,   54,   54,   54,   54,
       54,   54,   54,   14,   54,   54,   54,   54,   54,   54,
       54,   54,   45,   54,   54,   10,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       30,   54,   54,   54,   54,   39,   15,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   35,   54,   54,
       54,   54,   38,    1,   54,   54,   54,   20,   54,   19,
       29,   54,   54,   54,   54,   54,   54,   12,   13,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   17,   54,
       24,   31,   54,   54,   54,   54,   23,   54,   54,   54,
       54,   32,   54,   37,   54,   54,   54,   54,   54,   54,
       54,   54,   54,    9,   21,   54,   54,   54,    7,   54,
       54,   54,   54,   54,   54,   42,   54,   54,   54,   54,
       54,   54,   52,   54,   54,   54,   54,   46,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   43,
       54,   54,   54,   54,   49,   18,   54,   54,   54,   41,
       54,   54,   54,   54,   54,   54,   54,   54,   44,   54,
       54,   54,   51,   40,   48,   54,   54,   47,   54,   54,

       54,   54,   54,   54,   54,   25,   54,   54,   54,   54,
       54,   54,   54,   50,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    1,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    1,   20,
       21,   22,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       33,   39,   40,   41,   42,   43,   33,   44,   33,   33,
       45,    1,   46,   47,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   33,   59,   60,   61,
       62,   63,   33,   64,   65,   66,   67,   68,   33,   69,
       33,   33,   70,   71,   72,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   33,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   33,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   33,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[73] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    1,    1,
        1,    4,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
        1,    1
    } ;

static const flex_int16_t yy_base[422] =
    {   0,
        0,    0,  185, 1659, 1659, 1659, 1659,   65,  178, 1659,
      168,    0, 1659, 1659, 1659,  161, 1659,  151, 1659,  145,
       58, 1659,   60,  138,  131,   59,   60,  119,   62,   65,
       69,   64,   72,  109,   66,   98,  123,  154,  101,  157,
      125,  164, 1659, 1659, 1659, 1659,   80, 1659,  142, 1659,
       77,  141, 1659, 1659,  131, 1659, 1659,  136,  107,   75,
       90, 1659, 1659, 1659,   82,   84,  174,   85,  161,  189,
      209,  212,  213,  215,  217,  186,  198,  226,  241,  233,
      251,  259,  260,  261,  265,  268,  276,  275,  286,  301,
      283,  310,  302,  309,  328,  308,  317, 1659, 1659, 1659,

     1659,   93, 1659,   76,   73,   89,  202,  343,  327,  334,
      335,  337,  353,  360,  366,  369,  371,  380,  378,  374,
      379,  394,  405,  400,  385,  419,  412,  421,  425,  426,
      427,  434,  436,  452,  438,  460,  463,  474,  480,  483,
      478,  481,  485,  489,  479,  521,  512, 1659,  505,  526,
      527,  523,  538,  539,  540,  543,  548,  552,  558,  554,
      576,  581,  550,  586,  587,  599,  590,  592,  601,  595,
      623,  612,  626,  627,  615,  648,  649,  652,  637,  663,
      659,  670,  666,  673,  621,  674,  677,  639,  692,  685,
      658,  702,  698,  705,  712,  708,  718,  725,  729,  733,

      753,  741,  734,  765,  720,  747,  767,  749,  768,  780,
      773,  789,  787,  802,  792,  809,  790,  805,  815,  816,
      821,  829,  834,  794,  836,  830,  841,  848,  861,  862,
      867,  870,  847,  843,  872,  887,  876,  874,  905,  903,
      910,  885,  879,  912,  913,  908,  925,  916,  941,  918,
      929,  944,  957,  963,  958,  966,  965,  968,  985,  976,
      967,  994,  982,  990, 1004,  986, 1000, 1010, 1021, 1026,
     1028, 1038, 1032, 1023, 1046, 1022, 1049, 1044, 1072, 1050,
     1078, 1061, 1063, 1064, 1075, 1088, 1084, 1087, 1090, 1095,
     1099, 1104, 1100, 1111, 1112, 1119, 1138, 1126, 1136, 1150,

     1151, 1152, 1147, 1148, 1161, 1154, 1183, 1186, 1137, 1187,
     1176, 1144, 1190, 1189, 1193, 1201, 1164, 1214, 1215, 1221,
     1222, 1195, 1239, 1211, 1247, 1226, 1248, 1257, 1229, 1267,
     1276, 1249, 1281, 1261, 1263, 1264, 1284, 1289, 1273, 1285,
     1298, 1301, 1302, 1308, 1325, 1312, 1324, 1334, 1336, 1330,
     1327, 1340, 1344, 1352, 1356, 1358, 1362, 1363, 1378, 1381,
     1384, 1387, 1389, 1398, 1394, 1404, 1418, 1412, 1407, 1422,
     1427, 1433, 1432, 1443, 1435, 1438, 1441, 1444, 1455, 1447,
     1466, 1450, 1476, 1486, 1472, 1498, 1478, 1500, 1487, 1504,
     1510, 1513, 1491, 1497, 1509, 1525, 1526, 1512, 1522, 1523,

     1538, 1545, 1547, 1548, 1551, 1546, 1549, 1567, 1563, 1583,
     1580, 1572, 1594, 1554, 1659, 1643, 1647,   82, 1651, 1655,
       76
    } ;

static const flex_int16_t yy_def[422] =
    {   0,
      415,    1,  415,  415,  415,  415,  415,  415,  416,  415,
      415,  417,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  416,  415,  415,  415,  415,  415,  419,  415,  415,
      420,  415,  415,  415,  421,  418,  418,  421,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  415,  415,  415,

      415,  419,  415,  415,  420,  420,  421,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  415,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,

      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,

      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,

      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,    0,  415,  415,  415,  415,  415,
      415
    } ;

static const flex_int16_t yy_nxt[1732] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   35,   35,   36,   37,   35,   38,   39,   40,
       41,   35,   42,   35,   43,   44,   45,    4,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   35,   36,
       37,   35,   38,   39,   40,   41,   35,   42,   35,   46,
       47,   48,   49,   59,   61,   60,   65,   65,  107,   65,
       62,   65,   65,   65,   66,   50,   65,  106,   75,   65,
       59,   79,   60,  104,   81,  103,   69,   67,   76,   65,

       77,   65,   65,  106,  106,   80,   68,   68,   78,   68,
      148,   68,   68,   68,   75,   65,   68,   79,   65,   68,
       81,   69,   67,   76,  104,   77,   65,   90,   84,   68,
       80,   68,   68,   78,   85,   51,   65,   91,  103,  101,
       65,   70,   65,   82,   83,   68,   53,  100,   68,   99,
       98,   64,   71,   90,   84,   72,   68,   73,   63,   85,
       74,   58,   91,   95,   86,   57,   68,   70,   82,   83,
       68,   65,   68,   56,   65,   54,   87,   71,   65,   92,
       72,   65,   73,   53,  415,   74,  415,   93,   95,   86,
       96,   65,   88,   94,  415,   89,  415,  110,  108,  415,

       97,   68,   87,   65,   68,   92,   65,  415,   68,  121,
      415,   68,  109,   93,  111,   65,   96,   88,   94,   65,
       89,   68,  110,  415,  108,   97,   65,  112,  113,   65,
       65,  114,   65,   68,   65,  121,   68,  109,  122,  117,
      111,  118,  415,   65,  119,   68,  115,  116,  415,   68,
       65,  415,  112,  113,  120,  125,   68,  114,   65,   68,
       68,  415,   68,  122,   68,  117,  123,  118,   65,  415,
      119,  115,  116,   68,  124,  126,   65,   65,   65,  120,
       68,  125,   65,  415,  128,   65,  415,  130,   68,  415,
      129,  123,   65,   65,  132,  415,  127,  415,   68,  124,

       65,  126,  415,   65,  131,  134,   68,   68,   68,  136,
      128,  135,   68,  130,  133,   68,  129,  140,   65,   65,
      132,  127,   68,   68,  415,   65,   65,   65,  415,  131,
       68,  134,  143,   68,   65,  136,  135,  142,  137,  133,
      138,  139,  140,  141,   65,   65,  146,  147,   68,   68,
      144,   65,   65,  150,   65,   68,   68,   68,  143,  153,
       65,  152,  142,  137,   68,  138,  139,  151,  141,  145,
       65,  146,  149,  147,   68,   68,  144,   65,  415,  150,
      415,   68,   68,   65,   68,  153,   65,  152,   65,  154,
       68,   65,  151,  159,  145,   65,   65,   65,  149,  155,

       68,  415,   65,  156,  161,  415,  415,   68,  157,  158,
      162,   65,  163,   68,  154,  160,   68,   65,   68,  159,
      164,   68,   65,  167,  155,   68,   68,   68,  156,   65,
      161,  165,   68,  157,  158,  162,   65,  163,   65,  166,
      160,   68,   65,   65,   65,  168,  164,   68,  167,  415,
      169,   65,   68,   65,  170,   65,  415,  165,  175,   68,
      415,  172,  415,  415,  166,  171,   68,  173,   68,   65,
      415,  168,   68,   68,   68,  169,  174,   65,  178,  170,
       65,   68,  415,   68,  175,   68,  172,  176,  415,  180,
      171,   65,  173,  179,  177,   65,   65,   65,   65,   68,

       65,  174,   65,  178,  415,  188,   65,   68,  184,  415,
       68,  415,  176,  415,  181,  180,  182,  185,  179,  177,
      183,   68,   65,  186,  187,   68,   68,   68,   68,   65,
       68,  188,   68,  415,  184,  192,   68,  191,   65,  181,
       65,  182,  185,   65,   65,  183,  189,  415,  186,  187,
      415,  190,   68,  194,  193,   65,   65,   65,  195,   68,
       65,  192,  196,  191,  415,   65,  197,   65,   68,   65,
       68,   65,  189,   68,   68,   65,  205,  190,  415,  194,
      193,  198,  200,  195,  415,   68,   68,   68,  196,  199,
       68,  415,  197,   65,  202,   68,  201,   68,   65,   68,

      203,   68,  205,   65,   65,   68,  198,   65,  200,   65,
      415,  415,   65,  415,  199,  210,   65,  415,   65,  202,
      204,  201,  207,   68,  206,  208,  203,  415,   68,   65,
      211,  212,   65,   68,   68,  209,  213,   68,   65,   68,
       65,  210,   68,   65,   65,  204,   68,  207,   68,  206,
      415,  208,  215,  214,   65,  211,   65,  212,  415,   68,
      209,  213,   68,  217,  216,   65,   65,  221,   68,   65,
       68,  219,  218,   68,   68,   65,   65,  215,  220,  214,
       65,  223,  415,   65,   68,  415,   68,   65,  217,  216,
       65,   65,  225,  221,   65,   68,   68,  219,  218,   68,

      227,  415,   65,  222,  220,   68,   68,  223,  224,   65,
       68,  226,  230,   68,  229,   65,  228,   68,  225,   65,
       68,   68,   65,  415,   68,   65,  227,  233,  222,   65,
      415,  232,   68,  224,  234,   65,  226,   65,  230,   68,
      229,  228,   65,  415,  231,   68,   65,  415,  235,   68,
       65,   65,   68,  233,  415,   68,  232,  415,   65,   68,
      234,  236,  237,  243,   65,   68,   65,   68,  238,  231,
       65,  415,   68,  235,  244,  239,   68,  240,  415,  241,
       68,   68,   65,  246,   65,   65,  236,  237,   68,  243,
       65,  242,  247,  238,   68,  245,   68,   65,  415,  244,

       68,  239,  248,  240,   65,  241,   65,   65,  246,   65,
      415,   65,   68,  415,   68,   68,  242,  250,  247,   65,
       68,  245,   65,  249,  251,  415,   65,   68,  248,  260,
      252,  253,   65,   65,   68,  254,   68,   68,   65,   68,
      255,   68,  415,  250,  256,  257,   65,   65,  249,   68,
      251,   65,   68,   65,  260,  252,   68,  253,   65,  258,
       65,  254,   68,   68,   65,   65,  255,  415,   68,  415,
      256,  257,  259,  415,  261,  263,   68,   68,   65,   65,
      262,   68,  268,   68,   65,  258,  264,   65,   68,   65,
       68,   65,  265,   65,   68,   68,   65,  259,  269,  261,

      415,  263,   65,  266,   65,  262,  267,  268,   68,   68,
      270,  277,  264,  415,   68,  272,  271,   68,  265,   68,
       65,   68,   65,   68,  269,   65,   68,   65,  266,   65,
       65,  267,   68,   65,   68,   65,  270,  277,  415,  274,
      272,  271,   65,  273,  275,  276,   65,  415,  278,  415,
       68,  280,   68,  279,  281,   68,  283,   68,   65,   68,
       68,   65,  284,   68,  274,   68,  285,  415,  273,  275,
      276,  282,   68,  278,   65,   65,   68,  280,  279,  281,
       65,  283,   65,   65,   65,   65,  415,  284,   68,  415,
      415,   68,  285,   65,  288,  286,  289,  282,  293,   65,

      287,  290,   65,   65,   68,   68,  291,   65,  295,  292,
       68,   65,   68,   68,   68,   68,  296,   65,  294,  288,
      286,   65,  289,   68,  293,  287,  290,   65,  297,   68,
      415,  291,   68,   68,  295,  292,  415,   68,   65,   65,
       65,   68,  296,   65,  294,   65,  298,   68,  300,   65,
      301,   68,  415,  415,  297,   65,  303,   68,  304,  299,
      302,   65,  306,   65,  415,  415,   65,   65,   68,   68,
       68,  298,  305,   68,  300,   68,  301,  307,   65,   68,
       65,   65,  303,  304,  299,   68,  302,  306,  309,   65,
      415,   68,   65,   68,  308,   65,   68,   68,  305,  311,

      310,   65,  415,  307,   65,   65,  314,   65,   68,  415,
       68,   68,   65,  309,  312,  315,   65,   65,  415,   68,
      308,   65,   68,  313,  311,   68,  310,  415,   65,   65,
      415,   68,  314,  415,   68,   68,   65,   68,  317,  312,
      415,  315,   68,   65,  415,  316,   68,   68,  313,  318,
      319,   68,  415,   65,   65,   65,  415,  320,   68,   68,
      321,   65,  415,  317,   65,   65,   68,   65,   65,   65,
      316,   65,  415,   68,  318,  319,  325,  415,   65,  326,
      415,   65,  320,   68,   68,   68,  321,  415,  322,  323,
      324,   68,  328,   65,   68,   68,  327,   68,   68,   68,

       65,   68,  325,   65,   65,  326,   65,   65,   68,  329,
       65,   68,   65,  322,  323,  324,  332,  328,   65,  415,
      415,  327,  334,   68,  330,  331,  333,  336,   65,  335,
       68,   65,   65,   68,   68,  329,   68,   68,   65,   65,
       68,  332,   68,   65,  337,  338,   65,  334,   68,  330,
      331,  333,  415,  336,  335,  415,   65,  339,   68,  415,
      340,   68,   68,  341,   65,   65,   65,  343,   68,   68,
      337,  338,  346,   68,   65,  415,   68,  342,   65,  345,
       65,   65,  339,  415,   65,  340,   68,  349,  344,  341,
       65,  347,  343,   65,   68,   68,   68,  346,   65,  351,

      348,   65,   65,  342,   68,  345,   65,  352,   68,  354,
       68,   68,  349,  344,   68,   65,  415,  347,   65,   65,
       68,  350,  415,   68,  351,   65,  348,  353,   68,   65,
      358,   68,   68,  352,  415,  354,   68,  357,  415,  355,
      415,   65,   65,  356,   65,   68,  350,   65,   68,   68,
      359,   65,  353,   65,  415,   68,  358,   65,  362,   68,
      363,   65,  357,  361,  355,  360,  415,  364,  356,   65,
      365,   68,   68,   65,   68,   65,  359,   68,  415,   65,
       65,   68,  367,   68,  362,  415,  363,   68,  415,  361,
      360,   68,  364,  366,  368,   65,  365,  415,   65,   68,

      370,   65,  369,   68,   65,   68,   65,  371,  367,   68,
       68,   65,  415,  415,  372,   65,  374,  415,  366,  368,
      375,   65,  373,  415,   65,   68,  370,  369,   68,   65,
      377,   68,  376,  371,   68,   65,   68,  379,  415,   65,
      372,   68,  374,  380,   65,   68,  375,  373,  415,   65,
       65,   68,   65,  378,   68,   65,  377,  376,   65,   68,
       65,   65,  381,  379,   65,   68,  415,   65,  380,   68,
      415,  383,   65,  384,   68,  382,  385,  415,  378,   68,
       68,  387,   68,   65,  386,   68,  389,  381,   68,   65,
       68,   68,  415,   65,   68,   65,  383,   68,  390,  384,

      382,  385,   68,   65,   65,  415,  388,  387,   65,  386,
      391,  389,  392,   68,   65,   65,  394,   65,  415,   68,
      393,   65,  395,   68,  390,   68,   65,   65,  396,   65,
       65,  388,  397,   68,   68,  398,  391,  392,   68,   65,
       65,  394,   65,   65,   68,   68,  393,   68,  395,  399,
      400,   68,  401,  402,  396,   65,   68,   68,  397,   68,
       68,  398,   65,   65,   65,   65,   65,  415,   65,   68,
       68,   65,   68,   68,  403,  399,  400,  407,  401,  402,
       65,  404,  405,  406,   65,   68,  415,  415,  408,   65,
      415,  409,   68,   68,   68,   68,   68,   65,   68,  403,

       65,   68,  415,  407,  410,  415,  404,  405,  406,  411,
       68,   65,  413,  408,   68,  412,  414,  409,  415,   68,
      415,  415,  415,  415,  415,  415,  415,   68,  415,  410,
       68,  415,  415,  415,  415,  411,  415,  413,  415,  415,
      412,   68,  414,   52,   52,   52,   52,   55,  415,   55,
       55,  102,  102,  102,  102,  105,  105,  105,    3,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,

      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415
    } ;

static const flex_int16_t yy_chk[1732] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    8,   21,   23,   21,   26,   27,  421,   29,
       23,   32,   30,   35,  418,    8,   31,  105,   29,   33,
       60,   31,   60,  104,   33,  102,   27,   26,   29,   65,

       30,   66,   68,  106,   61,   32,   26,   27,   30,   29,
      106,   32,   30,   35,   29,   36,   31,   31,   39,   33,
       33,   27,   26,   29,   59,   30,   34,   39,   36,   65,
       32,   66,   68,   30,   36,    8,   28,   39,   58,   55,
       37,   28,   41,   34,   34,   36,   52,   51,   39,   49,
       47,   25,   28,   39,   36,   28,   34,   28,   24,   36,
       28,   20,   39,   41,   37,   18,   28,   28,   34,   34,
       37,   38,   41,   16,   40,   11,   38,   28,   69,   40,
       28,   42,   28,    9,    3,   28,    0,   40,   41,   37,
       42,   67,   38,   40,    0,   38,    0,   69,   67,    0,

       42,   38,   38,   76,   40,   40,   70,    0,   69,   76,
        0,   42,   67,   40,   70,   77,   42,   38,   40,  107,
       38,   67,   69,    0,   67,   42,   71,   70,   70,   72,
       73,   71,   74,   76,   75,   76,   70,   67,   77,   73,
       70,   74,    0,   78,   75,   77,   72,   72,    0,  107,
       80,    0,   70,   70,   75,   80,   71,   71,   79,   72,
       73,    0,   74,   77,   75,   73,   78,   74,   81,    0,
       75,   72,   72,   78,   79,   81,   82,   83,   84,   75,
       80,   80,   85,    0,   83,   86,    0,   84,   79,    0,
       83,   78,   88,   87,   86,    0,   82,    0,   81,   79,

       91,   81,    0,   89,   85,   88,   82,   83,   84,   89,
       83,   88,   85,   84,   87,   86,   83,   91,   90,   93,
       86,   82,   88,   87,    0,   96,   94,   92,    0,   85,
       91,   88,   94,   89,   97,   89,   88,   93,   90,   87,
       90,   90,   91,   92,  109,   95,   96,   97,   90,   93,
       95,  110,  111,  109,  112,   96,   94,   92,   94,  112,
      108,  111,   93,   90,   97,   90,   90,  110,   92,   95,
      113,   96,  108,   97,  109,   95,   95,  114,    0,  109,
        0,  110,  111,  115,  112,  112,  116,  111,  117,  113,
      108,  120,  110,  117,   95,  119,  121,  118,  108,  114,

      113,    0,  125,  115,  119,    0,    0,  114,  116,  116,
      120,  122,  121,  115,  113,  118,  116,  124,  117,  117,
      122,  120,  123,  125,  114,  119,  121,  118,  115,  127,
      119,  123,  125,  116,  116,  120,  126,  121,  128,  124,
      118,  122,  129,  130,  131,  126,  122,  124,  125,    0,
      127,  132,  123,  133,  128,  135,    0,  123,  133,  127,
        0,  130,    0,    0,  124,  129,  126,  131,  128,  134,
        0,  126,  129,  130,  131,  127,  132,  136,  135,  128,
      137,  132,    0,  133,  133,  135,  130,  134,    0,  137,
      129,  138,  131,  136,  134,  141,  145,  139,  142,  134,

      140,  132,  143,  135,    0,  145,  144,  136,  141,    0,
      137,    0,  134,    0,  138,  137,  139,  142,  136,  134,
      140,  138,  149,  143,  144,  141,  145,  139,  142,  147,
      140,  145,  143,    0,  141,  149,  144,  147,  146,  138,
      152,  139,  142,  150,  151,  140,  146,    0,  143,  144,
        0,  146,  149,  151,  150,  153,  154,  155,  152,  147,
      156,  149,  153,  147,    0,  157,  155,  163,  146,  158,
      152,  160,  146,  150,  151,  159,  163,  146,    0,  151,
      150,  156,  158,  152,    0,  153,  154,  155,  153,  157,
      156,    0,  155,  161,  160,  157,  159,  163,  162,  158,

      161,  160,  163,  164,  165,  159,  156,  167,  158,  168,
        0,    0,  170,    0,  157,  167,  166,    0,  169,  160,
      162,  159,  165,  161,  164,  166,  161,    0,  162,  172,
      168,  169,  175,  164,  165,  166,  170,  167,  185,  168,
      171,  167,  170,  173,  174,  162,  166,  165,  169,  164,
        0,  166,  172,  171,  179,  168,  188,  169,    0,  172,
      166,  170,  175,  174,  173,  176,  177,  179,  185,  178,
      171,  177,  176,  173,  174,  191,  181,  172,  178,  171,
      180,  181,    0,  183,  179,    0,  188,  182,  174,  173,
      184,  186,  183,  179,  187,  176,  177,  177,  176,  178,

      186,    0,  190,  180,  178,  191,  181,  181,  182,  189,
      180,  184,  190,  183,  189,  193,  187,  182,  183,  192,
      184,  186,  194,    0,  187,  196,  186,  194,  180,  195,
        0,  193,  190,  182,  195,  197,  184,  205,  190,  189,
      189,  187,  198,    0,  192,  193,  199,    0,  196,  192,
      200,  203,  194,  194,    0,  196,  193,    0,  202,  195,
      195,  198,  199,  202,  206,  197,  208,  205,  200,  192,
      201,    0,  198,  196,  203,  201,  199,  201,    0,  201,
      200,  203,  204,  206,  207,  209,  198,  199,  202,  202,
      211,  201,  207,  200,  206,  204,  208,  210,    0,  203,

      201,  201,  210,  201,  213,  201,  212,  217,  206,  215,
        0,  224,  204,    0,  207,  209,  201,  213,  207,  214,
      211,  204,  218,  212,  214,    0,  216,  210,  210,  224,
      215,  216,  219,  220,  213,  218,  212,  217,  221,  215,
      219,  224,    0,  213,  220,  221,  222,  226,  212,  214,
      214,  223,  218,  225,  224,  215,  216,  216,  227,  222,
      234,  218,  219,  220,  233,  228,  219,    0,  221,    0,
      220,  221,  223,    0,  225,  228,  222,  226,  229,  230,
      227,  223,  233,  225,  231,  222,  229,  232,  227,  235,
      234,  238,  230,  237,  233,  228,  243,  223,  235,  225,

        0,  228,  242,  231,  236,  227,  232,  233,  229,  230,
      236,  242,  229,    0,  231,  238,  237,  232,  230,  235,
      240,  238,  239,  237,  235,  246,  243,  241,  231,  244,
      245,  232,  242,  248,  236,  250,  236,  242,    0,  240,
      238,  237,  247,  239,  240,  241,  251,    0,  244,    0,
      240,  247,  239,  245,  248,  246,  250,  241,  249,  244,
      245,  252,  251,  248,  240,  250,  252,    0,  239,  240,
      241,  249,  247,  244,  253,  255,  251,  247,  245,  248,
      254,  250,  257,  256,  261,  258,    0,  251,  249,    0,
        0,  252,  252,  260,  255,  253,  256,  249,  260,  263,

      254,  257,  259,  266,  253,  255,  258,  264,  263,  259,
      254,  262,  257,  256,  261,  258,  264,  267,  262,  255,
      253,  265,  256,  260,  260,  254,  257,  268,  265,  263,
        0,  258,  259,  266,  263,  259,    0,  264,  269,  276,
      274,  262,  264,  270,  262,  271,  268,  267,  270,  273,
      271,  265,    0,    0,  265,  272,  273,  268,  274,  269,
      272,  278,  276,  275,    0,    0,  277,  280,  269,  276,
      274,  268,  275,  270,  270,  271,  271,  277,  282,  273,
      283,  284,  273,  274,  269,  272,  272,  276,  280,  279,
        0,  278,  285,  275,  279,  281,  277,  280,  275,  282,

      281,  287,    0,  277,  288,  286,  287,  289,  282,    0,
      283,  284,  290,  280,  285,  289,  291,  293,    0,  279,
      279,  292,  285,  286,  282,  281,  281,    0,  294,  295,
        0,  287,  287,    0,  288,  286,  296,  289,  293,  285,
        0,  289,  290,  298,    0,  292,  291,  293,  286,  294,
      295,  292,    0,  299,  309,  297,    0,  296,  294,  295,
      297,  312,    0,  293,  303,  304,  296,  300,  301,  302,
      292,  306,    0,  298,  294,  295,  303,    0,  305,  304,
        0,  317,  296,  299,  309,  297,  297,    0,  300,  301,
      302,  312,  306,  311,  303,  304,  305,  300,  301,  302,

      307,  306,  303,  308,  310,  304,  314,  313,  305,  307,
      315,  317,  322,  300,  301,  302,  311,  306,  316,    0,
        0,  305,  314,  311,  308,  310,  313,  316,  324,  315,
      307,  318,  319,  308,  310,  307,  314,  313,  320,  321,
      315,  311,  322,  326,  318,  319,  329,  314,  316,  308,
      310,  313,    0,  316,  315,    0,  323,  320,  324,    0,
      321,  318,  319,  323,  325,  327,  332,  326,  320,  321,
      318,  319,  329,  326,  328,    0,  329,  325,  334,  328,
      335,  336,  320,    0,  330,  321,  323,  332,  327,  323,
      339,  330,  326,  331,  325,  327,  332,  329,  333,  336,

      331,  337,  340,  325,  328,  328,  338,  337,  334,  340,
      335,  336,  332,  327,  330,  341,    0,  330,  342,  343,
      339,  333,    0,  331,  336,  344,  331,  338,  333,  346,
      344,  337,  340,  337,    0,  340,  338,  343,    0,  341,
        0,  347,  345,  342,  351,  341,  333,  350,  342,  343,
      345,  348,  338,  349,    0,  344,  344,  352,  349,  346,
      350,  353,  343,  348,  341,  347,    0,  351,  342,  354,
      352,  347,  345,  355,  351,  356,  345,  350,    0,  357,
      358,  348,  355,  349,  349,    0,  350,  352,    0,  348,
      347,  353,  351,  354,  356,  359,  352,    0,  360,  354,

      359,  361,  357,  355,  362,  356,  363,  360,  355,  357,
      358,  365,    0,    0,  361,  364,  363,    0,  354,  356,
      364,  366,  362,    0,  369,  359,  359,  357,  360,  368,
      366,  361,  365,  360,  362,  367,  363,  368,    0,  370,
      361,  365,  363,  369,  371,  364,  364,  362,    0,  373,
      372,  366,  375,  367,  369,  376,  366,  365,  377,  368,
      374,  378,  371,  368,  380,  367,    0,  382,  369,  370,
        0,  373,  379,  374,  371,  372,  377,    0,  367,  373,
      372,  379,  375,  381,  378,  376,  382,  371,  377,  385,
      374,  378,    0,  383,  380,  387,  373,  382,  383,  374,

      372,  377,  379,  384,  389,    0,  381,  379,  393,  378,
      384,  382,  385,  381,  394,  386,  387,  388,    0,  385,
      386,  390,  388,  383,  383,  387,  395,  391,  390,  398,
      392,  381,  391,  384,  389,  392,  384,  385,  393,  399,
      400,  387,  396,  397,  394,  386,  386,  388,  388,  396,
      397,  390,  399,  400,  390,  401,  395,  391,  391,  398,
      392,  392,  402,  406,  403,  404,  407,    0,  405,  399,
      400,  414,  396,  397,  401,  396,  397,  405,  399,  400,
      409,  402,  403,  404,  408,  401,    0,    0,  407,  412,
        0,  408,  402,  406,  403,  404,  407,  411,  405,  401,

      410,  414,    0,  405,  409,    0,  402,  403,  404,  410,
      409,  413,  412,  407,  408,  411,  413,  408,    0,  412,
        0,    0,    0,    0,    0,    0,    0,  411,    0,  409,
      410,    0,    0,    0,    0,  410,    0,  412,    0,    0,
      411,  413,  413,  416,  416,  416,  416,  417,    0,  417,
      417,  419,  419,  419,  419,  420,  420,  420,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,

      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[89] =
    {   0,
0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexico.l"
#line 4 "lexico.l"
#include <cstdlib>
#include "parser.h"
#include <QString>
#include <stdio.h>
#include <iostream>
#include <NodoAST.h>
#include "qlist.h"

int yylex();
void yyerror(const char *s);
int linea=0; // Para contar lineas
int columna = 1; // para las columnas
int anterior = 0;
NodoAST *raiz;
#line 1011 "scanner.cpp"
#line 1012 "scanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 37 "lexico.l"

#line 1229 "scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 416 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1659 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 38 "lexico.l"

	YY_BREAK

case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 40 "lexico.l"
{linea++;columna = 0;}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 41 "lexico.l"
{}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 42 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return numero;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 43 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return decimal;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 44 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return caracter;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 45 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return booleano;}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 46 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return cadena;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 47 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pprincipal;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 48 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pint;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 49 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pdouble;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 50 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pbool;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 51 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pchar;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 52 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pstring;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 53 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return parreglo;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 54 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pclase;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 55 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pextender;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 56 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return psobrescribir;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 57 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return ppublico;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 58 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pprivado;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 59 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pprotegido;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 60 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pvoid;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 61 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pretornar;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 62 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pimprimir;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 63 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pmostrarnotificacion;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 64 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return psi;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 65 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return psino;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 66 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return ppara;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 67 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return prepetir;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 68 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return promper;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 69 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pmientras;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 70 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcomprobar;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 71 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcaso;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 72 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return psalir;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 73 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pdefecto;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 74 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return phacer;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 75 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcontinuar;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 76 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pincluir;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 77 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return parchivo;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 78 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcreararchivoder;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 79 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcrearconjunto;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 80 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcrearregex;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 81 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcrearentrada;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 82 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pguardararchivo;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 83 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcuenta;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 84 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcrearcuenta;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 85 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pverificarcuenta;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 86 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pdepositarcuenta;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 87 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return prestarcuenta;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 88 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pimprimirtransaccionescuenta;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 89 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pconsultarcuenta;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 90 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return ptransferir;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 91 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pnew;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 92 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return id;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 93 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return abrir_corchete;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 94 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return cerrar_corchete;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 95 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return coma;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 96 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return punto;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 97 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return dos_puntos;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 98 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return finalizacion;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 99 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return igual;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 100 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return aumento;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 101 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return decremento;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 102 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return abrir_parentesis; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 103 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return cerrar_parentesis; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 104 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return abrir_llave;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 105 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return cerrar_llave;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 106 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return igual_igual;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 107 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return diferente_de;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 108 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return menor_que;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 109 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return menorigual_que;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 110 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return mayor_que;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 111 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return mayorigual_que;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 112 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return opor;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 113 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return opand;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 114 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return opnand;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 115 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return opnot;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 116 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return opnor;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 117 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return suma; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 118 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return resta; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 119 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return multi; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 120 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return division; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 121 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return potencia; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 122 "lexico.l"
{
                    strcpy(yylval.TEXT, yytext); columna=26;
                }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 125 "lexico.l"
{ columna++; }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 126 "lexico.l"
{linea++; columna = 0; anterior = 0;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 127 "lexico.l"
{
                    columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);
/*                    errorT *nuevoE = new errorT("Lexico",yytext,linea, columna);
                    listaErrores->append(*nuevoE);
*/
                    std::cout <<yytext <<" Error Lexico en la linea "<< linea << " Columna:"<< columna<<  std::endl;
                }
	YY_BREAK

case 88:
YY_RULE_SETUP
#line 135 "lexico.l"
ECHO;
	YY_BREAK
#line 1750 "scanner.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 416 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 416 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 415);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 135 "lexico.l"


