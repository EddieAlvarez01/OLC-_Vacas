#line 1 "scanner.cpp"

#line 3 "scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 87
#define YY_END_OF_BUFFER 88
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[411] =
    {   0,
        0,    0,   88,   86,   83,   85,   84,   76,   86,   59,
       86,   86,   63,   64,   80,   78,   56,   79,   57,   81,
        4,   58,   69,   60,   71,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   54,   55,   82,   65,   86,   66,    0,   68,
        0,    0,    8,   74,    0,   61,   62,    0,    0,    4,
        0,   70,   67,   72,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   26,   53,   53,   53,   53,   73,   75,   77,    6,

        0,    2,    5,    0,    0,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,    3,   53,   53,   53,   53,
       53,   33,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   28,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   27,   53,   53,    7,   53,   53,   22,   53,   53,
       53,   53,   53,   16,   53,   53,   53,   53,   53,   53,

       11,   53,   53,    7,    7,   53,   36,   53,   53,   53,
       53,   53,   52,   53,   53,   53,   53,   53,   53,   53,
       53,   34,   53,   53,   53,   53,   53,   53,   53,   14,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       10,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   30,   53,   53,   53,   53,
       39,   15,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   35,   53,   53,   53,   53,   38,    1,   53,
       53,   53,   20,   53,   19,   29,   53,   53,   53,   53,
       53,   53,   12,   13,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   17,   53,   24,   31,   53,   53,   53,
       53,   23,   53,   53,   53,   53,   32,   53,   37,   53,
       53,   53,   53,   53,   53,   53,   53,   53,    9,   21,
       53,   53,   53,    7,   53,   53,   53,   53,   53,   53,
       42,   53,   53,   53,   53,   53,   53,   51,   53,   53,
       53,   53,   45,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   43,   53,   53,   53,   53,   48,
       18,   53,   53,   53,   41,   53,   53,   53,   53,   53,
       53,   53,   53,   44,   53,   53,   53,   50,   40,   47,
       53,   53,   46,   53,   53,   53,   53,   53,   53,   53,

       25,   53,   53,   53,   53,   53,   53,   53,   49,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    1,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    1,   20,
       21,   22,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       33,   39,   40,   41,   42,   43,   33,   44,   33,   33,
       45,    1,   46,   47,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   33,   59,   60,   61,
       62,   63,   33,   64,   65,   66,   67,   68,   33,   69,
       33,   33,   70,   71,   72,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   33,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   33,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   33,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[73] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    1,    1,
        1,    4,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
        1,    1
    } ;

static const flex_int16_t yy_base[417] =
    {   0,
        0,    0,  204, 1647, 1647, 1647, 1647,   65,  192, 1647,
      188,    0, 1647, 1647, 1647,  181, 1647,  169, 1647,  159,
       58, 1647,   60,  136,  131,   59,   60,   62,   65,   94,
       66,   61,  102,   98,   69,  117,  101,  122,  129,  144,
      121,  160, 1647, 1647, 1647, 1647,   73, 1647,  133, 1647,
       66,  126, 1647, 1647,  122, 1647, 1647,  126,   88,   72,
       90, 1647, 1647, 1647,  135,  154,  170,  155,  162,  189,
      182,  207,  196,  198,  209,  199,  221,  230,  227,  233,
      242,  252,  245,  248,  264,  256,  279,  283,  281,  290,
      284,  306,  310,  317,  330,  331, 1647, 1647, 1647, 1647,

      101, 1647,   77,   79,   78,  172,  327,  334,  305,  345,
      353,  333,  356,  359,  368,  362,  372,  355,  371,  388,
      396,  395,  400,  410,  406,  408,  409,  411,  414,  428,
      443,  447,  433,  434,  459,  461,  466,  482,  486,  476,
      471,  470,  498,  511,  514, 1647,  508,  493,  526,  534,
      529,  238,  537,  539,  549,  553,  554,  558,  571,  578,
      574,  576,  580,  582,  581,  596,  607,  621,  617,  622,
      614,  267,  629,  623,  639,  625,  649,  645,  657,  661,
      663,  308,  671,  677,  540,  681,  685,  683,  689,  688,
      700,  717,  702,  690,  708,  710,  698,  737,  733,  723,

      734,  735,  761,  743,  745,  755,  757,  759,  777,  766,
      778,  788,  774,  792,  798,  800,  803,  812,  813,  784,
      817,  809,  823,  844,  841,  848,  846,  858,  855,  820,
      882,  862,  856,  869,  884,  889,  897,  901,  881,  909,
      866,  907,  920,  921,  922,  928,  924,  926,  945,  948,
      946,  961,  949,  964,  977,  923,  981,  974,  987,  986,
      973,  998,  999, 1000, 1001, 1010, 1020, 1026, 1024, 1027,
     1035, 1023, 1038, 1039, 1045, 1047, 1055, 1049, 1063, 1064,
     1072, 1082, 1073, 1080, 1074, 1089, 1092, 1096, 1097, 1099,
     1100, 1123, 1095, 1105, 1131, 1134, 1136, 1132, 1133, 1138,

     1137, 1139, 1165, 1149, 1171, 1175, 1159, 1172, 1178, 1184,
     1190, 1176, 1196, 1197, 1185, 1200, 1188, 1224, 1207, 1232,
     1234, 1233, 1238, 1222, 1242, 1244, 1240, 1255, 1250, 1259,
     1266, 1276, 1267, 1260, 1287, 1291, 1293, 1292, 1295, 1299,
     1298, 1312, 1319, 1332, 1311, 1304, 1338, 1314, 1330, 1339,
     1345, 1353, 1316, 1365, 1358, 1372, 1373, 1356, 1382, 1378,
     1397, 1380, 1407, 1390, 1384, 1400, 1417, 1422, 1425, 1405,
     1419, 1428, 1431, 1448, 1421, 1433, 1440, 1445, 1465, 1462,
     1477, 1466, 1486, 1460, 1473, 1488, 1494, 1474, 1497, 1500,
     1502, 1513, 1501, 1515, 1521, 1514, 1522, 1529, 1537, 1539,

     1523, 1540, 1549, 1561, 1564, 1563, 1565, 1571, 1538, 1647,
     1631, 1635,   88, 1639, 1643,   79
    } ;

static const flex_int16_t yy_def[417] =
    {   0,
      410,    1,  410,  410,  410,  410,  410,  410,  411,  410,
      410,  412,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  411,  410,  410,  410,  410,  410,  414,  410,  410,
      415,  410,  410,  410,  416,  413,  413,  416,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  410,  410,  410,  410,

      414,  410,  410,  415,  415,  416,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  410,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,

      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,

      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,

      413,  413,  413,  413,  413,  413,  413,  413,  413,    0,
      410,  410,  410,  410,  410,  410
    } ;

static const flex_int16_t yy_nxt[1720] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   35,   35,   36,   37,   35,   38,   39,   40,
       41,   35,   42,   35,   43,   44,   45,    4,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   35,   36,
       37,   35,   38,   39,   40,   41,   35,   42,   35,   46,
       47,   48,   49,   59,   61,   60,   65,   65,   65,   65,
       62,  106,   65,   65,   70,   50,   65,   59,   78,   60,
       66,   74,  105,  105,  103,   71,   69,   67,   72,  146,

       73,   75,   79,  102,  105,  103,   68,   68,   68,   68,
       70,   65,   68,   68,   78,   65,   68,   74,   65,   65,
       71,   69,   67,   72,   80,   73,   75,   79,  102,   76,
      100,   53,   81,   82,   65,   51,   99,   77,   65,   65,
       98,   68,   85,   97,   86,   68,   65,   83,   68,   68,
       80,   64,   65,   84,   76,   89,   63,   81,   82,   94,
       87,   65,   77,   88,   68,   90,   91,   85,   68,   68,
       86,   65,   65,   83,   92,   58,   68,   65,   84,   65,
       93,   89,   68,   57,   94,   87,   95,   65,   88,   65,
       90,   68,   91,   56,  107,   54,   96,   53,  109,   65,

       92,   68,   68,  410,  113,   93,   65,   68,  108,   68,
      410,  410,   95,   65,  110,   65,   65,   68,  410,   68,
      107,   96,  116,  109,   65,  117,   65,  111,  112,   68,
      113,  410,  119,  108,  410,  118,   68,  410,   65,  120,
      110,  114,  115,   68,   65,   68,   68,   65,  116,  123,
       65,  117,  111,  112,   68,   65,   68,  124,  119,   65,
      118,  121,   65,  122,  120,   65,  114,  115,   68,   65,
      410,  128,  410,   65,   68,  123,  126,   68,  410,  125,
       68,   65,  127,  124,   65,   68,  121,  129,  122,   68,
      130,  410,   68,  410,  131,   68,   65,  128,   65,   68,

       65,   65,  126,   68,  125,  410,  134,   65,  127,  132,
      410,   68,  129,  410,   68,  133,  130,  139,  135,  131,
      136,  137,   65,   65,  138,   65,   68,   65,   68,  410,
       68,   68,  134,  141,   65,  132,  410,   68,  149,  142,
      133,  140,  139,  135,   65,  136,  137,   65,   65,  138,
       65,   65,   68,   68,  410,   68,  147,   68,  143,  141,
      148,  145,   65,  149,   68,  142,  140,  410,  144,  152,
       65,  150,   65,   65,   68,  151,   65,   68,   68,   65,
       68,   68,  147,  143,  157,   65,  148,  145,   65,   65,
      410,  159,   68,  144,  152,  153,  154,  150,  158,  410,

       68,  151,   68,   68,  160,   65,   68,  155,  156,   68,
      157,  410,   65,   65,  161,   68,  159,   65,   68,   68,
      153,  154,  162,   65,  158,   65,   65,   65,   65,  160,
      410,   65,  155,  156,  163,   68,  165,  410,  164,  410,
      161,  167,   68,   68,  166,   65,  169,   68,  162,  168,
       65,   65,  410,   68,  170,   68,   68,   68,   68,  163,
       65,   68,  165,  164,   65,  172,  167,  176,  410,  166,
      171,  169,  410,  175,  168,   68,   65,  410,   65,  170,
       68,   68,  173,   65,  410,  177,  410,   65,   65,  174,
       68,  172,  176,   65,   68,  171,  410,  410,  175,   65,

      410,  178,  179,   65,  410,  184,   68,  173,   68,  183,
       65,  177,  182,   68,  174,   65,  181,   68,   68,  180,
      410,  190,  410,   68,  185,   65,  178,  179,   65,   68,
      184,   65,  410,   68,  183,  410,  186,  182,  189,  188,
       68,  187,  181,   65,  180,   68,   65,  190,  410,  410,
      185,   65,  191,  193,   65,   68,   65,   65,   68,  410,
      410,   68,  186,  194,  189,  188,   65,  187,  410,  192,
       65,   65,  410,   68,  410,   65,   68,  195,  191,  193,
      410,   68,  199,  197,   68,  410,   68,   68,   65,  194,
      196,   65,  198,   65,  192,   65,   68,   65,   65,   65,

       68,   68,  195,  410,  201,   68,  204,  206,  199,  197,
      200,  203,  202,   65,  410,  196,  205,  198,   68,  207,
      410,   68,  410,   68,   65,   68,  208,   68,   68,   68,
      201,   65,  204,  206,   65,  200,  203,  202,   65,   65,
       65,  205,   65,   68,  207,  215,   65,  410,  209,  410,
      213,  210,  208,  214,   68,  217,   65,  211,  410,  410,
      212,   68,   65,  410,   68,  216,   65,  219,   68,   68,
       68,  215,   68,  209,   65,  213,   68,  210,   65,  214,
       65,  217,  211,  410,  410,  212,   68,  221,   65,  218,
      410,  216,   68,  219,   65,  220,   68,  223,   65,  410,

       65,  222,   65,  225,   68,   65,   65,   65,   68,  410,
       68,  410,  226,  221,  218,   65,  224,   65,   68,   65,
      220,  228,  229,  223,   68,   65,  222,   65,   68,  225,
       68,  227,   68,  234,   65,   68,   68,   68,  226,  230,
       65,  224,  231,  233,  232,   68,  228,   68,  229,   68,
       65,   65,   65,  240,   65,   68,  227,   68,  234,  235,
       65,  236,   65,  237,   68,  230,  410,  231,  233,  232,
       68,  241,   65,  239,   65,  238,   65,  243,   65,  240,
       68,   68,   68,   65,   68,  235,  242,  236,  246,  237,
       68,   65,   68,  244,   65,   65,  241,  410,  239,  410,

      238,   65,   68,  243,   68,   65,   68,  245,   68,   65,
      248,  410,  242,   68,  246,   65,  247,   65,  244,  255,
       65,   68,  249,  250,   68,   68,   65,  252,  251,   65,
       65,   68,  410,  245,   65,   68,  248,   65,  410,   68,
       65,  247,  253,  410,  255,   68,  410,   68,  249,  250,
       68,  254,  410,  252,  251,  256,   68,  410,   65,   68,
       68,   65,  257,   65,   68,   65,  259,   68,  253,  410,
       68,  258,   65,   65,  410,   65,  254,  410,  260,   65,
      256,  410,  261,   65,  410,  265,   65,  257,   68,  410,
      263,   68,  259,   68,  262,   68,  266,  258,   65,   65,

      410,   65,   68,   68,  260,   68,   65,  261,  264,   68,
      267,  265,  410,   68,   65,  263,   68,  273,   65,  262,
      410,  266,  268,  410,   65,  269,   65,  272,   68,   68,
      270,   68,  271,  275,  264,  267,   68,   65,   65,   65,
       65,   65,  273,   65,   68,   65,  280,  268,   68,  274,
      269,  277,  410,  272,   68,  270,   68,  271,  276,  275,
      278,  279,   65,   65,  281,   65,   65,   68,   68,   68,
       68,   68,  280,   68,  274,   68,  284,  277,   65,  410,
      410,   65,  282,  276,  283,  278,  279,  286,  287,  281,
       65,   65,   68,   68,   65,   68,   68,  285,   65,  288,

      290,  410,  284,   65,   65,  289,  410,  282,   68,  283,
      292,   68,  286,  291,  287,   65,   65,   65,   65,  410,
       68,   68,  285,  295,   68,  288,  290,   65,   68,  410,
      410,  289,  296,   68,   68,  293,  292,   65,  294,  291,
       65,   65,  297,   65,   65,   68,   68,   68,   68,  295,
      298,  302,   65,  300,  410,   65,   65,   68,  296,  299,
      293,  303,   65,  294,   65,  410,   65,   68,  297,  305,
       68,   68,   65,   68,   68,  301,  298,  302,  410,  300,
       65,   65,   68,  304,  299,   68,   68,  303,  410,   65,
       65,   65,   68,  306,   68,  305,   68,   65,  410,   65,

      301,  410,   68,  307,  309,  310,   65,  308,  304,   65,
       68,   68,   65,   65,   65,  410,   65,   65,  306,   68,
       68,   68,   65,  410,  410,  410,  410,   68,  307,   68,
      309,  310,  308,  311,  312,  313,   68,  314,  315,   68,
       65,  410,   68,   68,   68,  316,   68,   68,   65,   65,
       65,   65,   68,   65,   65,   65,   65,  410,  311,  312,
      313,  320,  314,  315,  321,  324,   65,  410,  410,  317,
       68,  316,  318,  322,  319,  323,   65,  410,   68,   68,
       68,   68,   65,   68,   68,   68,   68,  320,   65,   65,
      321,  324,   65,   65,  317,   65,   68,  318,  322,  319,

      323,   65,   65,  325,  410,   65,   68,   65,  328,  326,
      410,  329,   68,   65,   65,  327,  331,   65,   68,   68,
      330,  334,   68,   68,   65,   68,  332,  333,  325,  410,
      410,   68,   68,  328,  326,   68,  329,   68,  335,   65,
      327,   65,  331,   68,   68,  330,  334,   68,  336,   65,
       65,   65,  332,  333,   68,   65,  410,   65,  410,   65,
      340,   65,  337,  335,  410,  341,  342,   65,  343,   68,
      410,   68,   65,  339,  336,  338,   65,   65,  344,   68,
       68,   68,  410,   65,   65,   68,  340,   68,  337,   68,
      341,   68,  342,   65,  343,  345,  410,   68,  339,  347,

      338,  346,   68,  344,   65,  348,   68,   68,   65,   65,
       65,  349,   65,   68,   68,   65,   65,  353,  410,  410,
      345,   65,  410,   68,  354,  347,  346,  352,   65,   65,
      348,   65,  350,   65,   68,  351,   65,  349,   68,   68,
       68,  358,   68,  353,  359,   68,   68,   65,  356,   65,
      354,   68,  352,  355,  357,   65,   65,  350,   68,   68,
      351,   68,   65,   68,  410,  362,   68,  358,  360,  359,
       65,  361,  410,   65,  356,   65,  410,   68,  355,   68,
      357,  363,   65,  369,  366,   68,   68,  365,  410,   65,
       65,  362,   68,  364,  360,   65,  361,   65,  410,   65,

       68,   65,  367,   68,  370,   68,  363,   65,  368,  369,
      366,  410,   68,  365,   65,  373,  371,   65,  364,   68,
       68,  410,   65,  372,   65,   68,  375,   68,  367,   68,
      370,   68,  374,  368,   65,  376,   65,   68,   65,   65,
      373,  371,   65,  410,   68,   65,  410,   68,   65,  372,
       65,  375,   68,  410,   68,  379,  410,   65,  374,  377,
      376,  378,   65,  380,   68,   65,   68,  385,   68,   68,
      410,  381,   68,  383,  382,   68,  384,   65,   68,   65,
       68,  379,   65,   65,  377,  410,  378,   68,  380,  386,
       65,   65,   68,  385,   65,   68,  381,  391,  383,  388,

      382,  384,  387,   65,  389,   65,  410,   68,  390,   68,
      392,   65,   68,   68,   65,  386,  393,   65,   65,   65,
       68,   68,  410,  391,   68,  388,  394,  387,  410,  389,
       65,   65,   65,   68,  390,   68,  392,  395,   65,   65,
       65,   68,  393,  410,   68,  396,   65,   68,   68,   68,
      398,  397,  394,  410,   65,   65,   65,   65,  399,  410,
       68,   68,   68,  395,  400,  402,   65,  410,   68,   68,
       68,  396,  401,  404,  410,  398,   68,  397,   65,  403,
       65,   65,   65,  399,   68,   68,   68,   68,   65,  400,
      406,  402,  410,  409,  410,  410,   68,  401,  407,  404,

      410,  410,  405,  410,  403,  408,  410,  410,   68,  410,
       68,   68,   68,  410,  410,  410,  406,  410,   68,  409,
      410,  410,  410,  407,  410,  410,  410,  405,  410,  410,
      408,   52,   52,   52,   52,   55,  410,   55,   55,  101,
      101,  101,  101,  104,  104,  104,    3,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,

      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410
    } ;

static const flex_int16_t yy_chk[1720] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    8,   21,   23,   21,   26,   27,   32,   28,
       23,  416,   29,   31,   28,    8,   35,   60,   31,   60,
      413,   29,  105,  104,  103,   28,   27,   26,   28,  105,

       28,   29,   32,  101,   61,   59,   26,   27,   32,   28,
       28,   30,   29,   31,   31,   34,   35,   29,   37,   33,
       28,   27,   26,   28,   33,   28,   29,   32,   58,   30,
       55,   52,   34,   34,   36,    8,   51,   30,   41,   38,
       49,   30,   37,   47,   38,   34,   39,   36,   37,   33,
       33,   25,   65,   36,   30,   39,   24,   34,   34,   41,
       38,   40,   30,   38,   36,   39,   40,   37,   41,   38,
       38,   66,   68,   36,   40,   20,   39,   42,   36,   69,
       40,   39,   65,   18,   41,   38,   42,   67,   38,  106,
       39,   40,   40,   16,   67,   11,   42,    9,   69,   71,

       40,   66,   68,    3,   71,   40,   70,   42,   67,   69,
        0,    0,   42,   73,   70,   74,   76,   67,    0,  106,
       67,   42,   73,   69,   72,   74,   75,   70,   70,   71,
       71,    0,   75,   67,    0,   74,   70,    0,   77,   76,
       70,   72,   72,   73,   79,   74,   76,   78,   73,   79,
       80,   74,   70,   70,   72,  152,   75,   80,   75,   81,
       74,   77,   83,   78,   76,   84,   72,   72,   77,   82,
        0,   83,    0,   86,   79,   79,   82,   78,    0,   81,
       80,   85,   82,   80,  172,  152,   77,   84,   78,   81,
       85,    0,   83,    0,   86,   84,   87,   83,   89,   82,

       88,   91,   82,   86,   81,    0,   88,   90,   82,   87,
        0,   85,   84,    0,  172,   87,   85,   91,   89,   86,
       89,   89,  109,   92,   90,  182,   87,   93,   89,    0,
       88,   91,   88,   93,   94,   87,    0,   90,  109,   94,
       87,   92,   91,   89,  107,   89,   89,   95,   96,   90,
      112,  108,  109,   92,    0,  182,  107,   93,   94,   93,
      108,   96,  110,  109,   94,   94,   92,    0,   95,  112,
      111,  110,  118,  113,  107,  111,  114,   95,   96,  116,
      112,  108,  107,   94,  116,  115,  108,   96,  119,  117,
        0,  118,  110,   95,  112,  113,  114,  110,  117,    0,

      111,  111,  118,  113,  119,  120,  114,  115,  115,  116,
      116,    0,  122,  121,  120,  115,  118,  123,  119,  117,
      113,  114,  121,  125,  117,  126,  127,  124,  128,  119,
        0,  129,  115,  115,  122,  120,  124,    0,  123,    0,
      120,  126,  122,  121,  125,  130,  128,  123,  121,  127,
      133,  134,    0,  125,  129,  126,  127,  124,  128,  122,
      131,  129,  124,  123,  132,  131,  126,  134,    0,  125,
      130,  128,    0,  133,  127,  130,  135,    0,  136,  129,
      133,  134,  132,  137,    0,  135,    0,  142,  141,  132,
      131,  131,  134,  140,  132,  130,    0,    0,  133,  138,

        0,  136,  137,  139,    0,  142,  135,  132,  136,  141,
      148,  135,  140,  137,  132,  143,  139,  142,  141,  138,
        0,  148,    0,  140,  143,  147,  136,  137,  144,  138,
      142,  145,    0,  139,  141,    0,  144,  140,  147,  145,
      148,  144,  139,  149,  138,  143,  151,  148,    0,    0,
      143,  150,  149,  151,  153,  147,  154,  185,  144,    0,
        0,  145,  144,  153,  147,  145,  155,  144,    0,  150,
      156,  157,    0,  149,    0,  158,  151,  154,  149,  151,
        0,  150,  158,  156,  153,    0,  154,  185,  159,  153,
      155,  161,  157,  162,  150,  160,  155,  163,  165,  164,

      156,  157,  154,    0,  160,  158,  163,  164,  158,  156,
      159,  162,  161,  166,    0,  155,  163,  157,  159,  165,
        0,  161,    0,  162,  167,  160,  166,  163,  165,  164,
      160,  171,  163,  164,  169,  159,  162,  161,  168,  170,
      174,  163,  176,  166,  165,  174,  173,    0,  167,    0,
      171,  168,  166,  173,  167,  176,  175,  169,    0,    0,
      170,  171,  178,    0,  169,  175,  177,  178,  168,  170,
      174,  174,  176,  167,  179,  171,  173,  168,  180,  173,
      181,  176,  169,    0,    0,  170,  175,  180,  183,  177,
        0,  175,  178,  178,  184,  179,  177,  183,  186,    0,

      188,  181,  187,  186,  179,  190,  189,  194,  180,    0,
      181,    0,  187,  180,  177,  197,  184,  191,  183,  193,
      179,  190,  191,  183,  184,  195,  181,  196,  186,  186,
      188,  189,  187,  197,  192,  190,  189,  194,  187,  192,
      200,  184,  193,  196,  195,  197,  190,  191,  191,  193,
      199,  201,  202,  200,  198,  195,  189,  196,  197,  198,
      204,  198,  205,  198,  192,  192,    0,  193,  196,  195,
      200,  202,  206,  199,  207,  198,  208,  206,  203,  200,
      199,  201,  202,  210,  198,  198,  203,  198,  210,  198,
      204,  213,  205,  208,  209,  211,  202,    0,  199,    0,

      198,  220,  206,  206,  207,  212,  208,  209,  203,  214,
      212,    0,  203,  210,  210,  215,  211,  216,  208,  220,
      217,  213,  214,  215,  209,  211,  222,  217,  216,  218,
      219,  220,    0,  209,  221,  212,  212,  230,    0,  214,
      223,  211,  218,    0,  220,  215,    0,  216,  214,  215,
      217,  219,    0,  217,  216,  221,  222,    0,  225,  218,
      219,  224,  223,  227,  221,  226,  225,  230,  218,    0,
      223,  224,  229,  233,    0,  228,  219,    0,  226,  232,
      221,    0,  227,  241,    0,  232,  234,  223,  225,    0,
      229,  224,  225,  227,  228,  226,  233,  224,  239,  231,

        0,  235,  229,  233,  226,  228,  236,  227,  231,  232,
      234,  232,    0,  241,  237,  229,  234,  239,  238,  228,
        0,  233,  235,    0,  242,  236,  240,  238,  239,  231,
      236,  235,  237,  242,  231,  234,  236,  243,  244,  245,
      256,  247,  239,  248,  237,  246,  247,  235,  238,  240,
      236,  244,    0,  238,  242,  236,  240,  237,  243,  242,
      245,  246,  249,  251,  248,  250,  253,  243,  244,  245,
      256,  247,  247,  248,  240,  246,  251,  244,  252,    0,
        0,  254,  249,  243,  250,  245,  246,  253,  254,  248,
      261,  258,  249,  251,  255,  250,  253,  252,  257,  255,

      258,    0,  251,  260,  259,  257,    0,  249,  252,  250,
      260,  254,  253,  259,  254,  262,  263,  264,  265,    0,
      261,  258,  252,  265,  255,  255,  258,  266,  257,    0,
        0,  257,  266,  260,  259,  263,  260,  267,  264,  259,
      272,  269,  267,  268,  270,  262,  263,  264,  265,  265,
      268,  272,  271,  270,    0,  273,  274,  266,  266,  269,
      263,  274,  275,  264,  276,    0,  278,  267,  267,  276,
      272,  269,  277,  268,  270,  271,  268,  272,    0,  270,
      279,  280,  271,  275,  269,  273,  274,  274,    0,  281,
      283,  285,  275,  277,  276,  276,  278,  284,    0,  282,

      271,    0,  277,  280,  282,  284,  286,  281,  275,  287,
      279,  280,  293,  288,  289,    0,  290,  291,  277,  281,
      283,  285,  294,    0,    0,    0,    0,  284,  280,  282,
      282,  284,  281,  287,  288,  289,  286,  290,  291,  287,
      292,    0,  293,  288,  289,  292,  290,  291,  295,  298,
      299,  296,  294,  297,  301,  300,  302,    0,  287,  288,
      289,  298,  290,  291,  299,  302,  304,    0,    0,  295,
      292,  292,  296,  300,  297,  301,  307,    0,  295,  298,
      299,  296,  303,  297,  301,  300,  302,  298,  305,  308,
      299,  302,  306,  312,  295,  309,  304,  296,  300,  297,

      301,  310,  315,  303,    0,  317,  307,  311,  308,  305,
        0,  309,  303,  313,  314,  306,  311,  316,  305,  308,
      310,  315,  306,  312,  319,  309,  313,  314,  303,    0,
        0,  310,  315,  308,  305,  317,  309,  311,  316,  324,
      306,  318,  311,  313,  314,  310,  315,  316,  318,  320,
      322,  321,  313,  314,  319,  323,    0,  327,    0,  325,
      323,  326,  320,  316,    0,  324,  325,  329,  326,  324,
        0,  318,  328,  322,  318,  321,  330,  334,  327,  320,
      322,  321,    0,  331,  333,  323,  323,  327,  320,  325,
      324,  326,  325,  332,  326,  328,    0,  329,  322,  332,

      321,  331,  328,  327,  335,  333,  330,  334,  336,  338,
      337,  335,  339,  331,  333,  341,  340,  339,    0,    0,
      328,  346,    0,  332,  340,  332,  331,  338,  345,  342,
      333,  348,  336,  353,  335,  337,  343,  335,  336,  338,
      337,  345,  339,  339,  346,  341,  340,  349,  343,  344,
      340,  346,  338,  342,  344,  347,  350,  336,  345,  342,
      337,  348,  351,  353,    0,  350,  343,  345,  347,  346,
      352,  349,    0,  358,  343,  355,    0,  349,  342,  344,
      344,  351,  354,  358,  355,  347,  350,  354,    0,  356,
      357,  350,  351,  352,  347,  360,  349,  362,    0,  359,

      352,  365,  356,  358,  359,  355,  351,  364,  357,  358,
      355,    0,  354,  354,  361,  362,  360,  366,  352,  356,
      357,    0,  370,  361,  363,  360,  364,  362,  356,  359,
      359,  365,  363,  357,  367,  366,  371,  364,  375,  368,
      362,  360,  369,    0,  361,  372,    0,  366,  373,  361,
      376,  364,  370,    0,  363,  369,    0,  377,  363,  367,
      366,  368,  378,  372,  367,  374,  371,  378,  375,  368,
        0,  373,  369,  376,  374,  372,  377,  384,  373,  380,
      376,  369,  379,  382,  367,    0,  368,  377,  372,  379,
      385,  388,  378,  378,  381,  374,  373,  385,  376,  381,

      374,  377,  380,  383,  382,  386,    0,  384,  383,  380,
      386,  387,  379,  382,  389,  379,  387,  390,  393,  391,
      385,  388,    0,  385,  381,  381,  391,  380,    0,  382,
      392,  396,  394,  383,  383,  386,  386,  392,  395,  397,
      401,  387,  387,    0,  389,  394,  398,  390,  393,  391,
      396,  395,  391,    0,  399,  409,  400,  402,  397,    0,
      392,  396,  394,  392,  398,  400,  403,    0,  395,  397,
      401,  394,  399,  403,    0,  396,  398,  395,  404,  402,
      406,  405,  407,  397,  399,  409,  400,  402,  408,  398,
      405,  400,    0,  408,    0,    0,  403,  399,  406,  403,

        0,    0,  404,    0,  402,  407,    0,    0,  404,    0,
      406,  405,  407,    0,    0,    0,  405,    0,  408,  408,
        0,    0,    0,  406,    0,    0,    0,  404,    0,    0,
      407,  411,  411,  411,  411,  412,    0,  412,  412,  414,
      414,  414,  414,  415,  415,  415,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,

      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[88] =
    {   0,
0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexico.l"
#line 4 "lexico.l"
#include <cstdlib>
#include "parser.h"
#include <QString>
#include <stdio.h>
#include <iostream>
#include <NodoAST.h>
#include "qlist.h"

int yylex();
void yyerror(const char *s);
int linea=0; // Para contar lineas
int columna = 1; // para las columnas
int anterior = 0;
NodoAST *raiz;
#line 1004 "scanner.cpp"
#line 1005 "scanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 37 "lexico.l"

#line 1222 "scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 411 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1647 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 38 "lexico.l"

	YY_BREAK

case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 40 "lexico.l"
{linea++;columna = 0;}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 41 "lexico.l"
{}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 42 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return numero;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 43 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return decimal;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 44 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return caracter;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 45 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return booleano;}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 46 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return cadena;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 47 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pprincipal;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 48 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pint;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 49 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pdouble;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 50 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pbool;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 51 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pchar;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 52 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pstring;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 53 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return parreglo;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 54 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pclase;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 55 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pextender;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 56 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return psobrescribir;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 57 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return ppublico;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 58 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pprivado;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 59 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pprotegido;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 60 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pvoid;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 61 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pretornar;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 62 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pimprimir;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 63 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pmostrarnotificacion;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 64 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return psi;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 65 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return psino;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 66 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return ppara;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 67 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return prepetir;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 68 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return promper;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 69 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pmientras;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 70 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcomprobar;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 71 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcaso;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 72 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return psalir;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 73 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pdefecto;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 74 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return phacer;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 75 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcontinuar;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 76 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pincluir;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 77 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return parchivo;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 78 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcreararchivoder;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 79 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcrearconjunto;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 80 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcrearregex;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 81 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcrearentrada;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 82 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pguardararchivo;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 83 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcrearcuenta;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 84 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pverificarcuenta;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 85 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pdepositarcuenta;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 86 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return prestarcuenta;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 87 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pimprimirtransaccionescuenta;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 88 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pconsultarcuenta;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 89 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return ptransferir;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 90 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pnew;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 91 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return id;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 92 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return abrir_corchete;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 93 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return cerrar_corchete;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 94 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return coma;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 95 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return punto;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 96 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return dos_puntos;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 97 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return finalizacion;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 98 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return igual;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 99 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return aumento;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 100 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return decremento;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 101 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return abrir_parentesis; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 102 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return cerrar_parentesis; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 103 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return abrir_llave;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 104 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return cerrar_llave;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 105 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return igual_igual;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 106 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return diferente_de;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 107 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return menor_que;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 108 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return menorigual_que;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 109 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return mayor_que;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 110 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return mayorigual_que;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 111 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return opor;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 112 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return opand;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 113 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return opnand;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 114 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return opnot;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 115 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return opnor;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 116 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return suma; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 117 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return resta; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 118 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return multi; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 119 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return division; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 120 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return potencia; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 121 "lexico.l"
{
                    strcpy(yylval.TEXT, yytext); columna=26;
                }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 124 "lexico.l"
{ columna++; }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 125 "lexico.l"
{linea++; columna = 0; anterior = 0;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 126 "lexico.l"
{
                    columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);
/*                    errorT *nuevoE = new errorT("Lexico",yytext,linea, columna);
                    listaErrores->append(*nuevoE);
*/
                    std::cout <<yytext <<" Error Lexico en la linea "<< linea << " Columna:"<< columna<<  std::endl;
                }
	YY_BREAK

case 87:
YY_RULE_SETUP
#line 134 "lexico.l"
ECHO;
	YY_BREAK
#line 1738 "scanner.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 411 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 411 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 410);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 134 "lexico.l"


