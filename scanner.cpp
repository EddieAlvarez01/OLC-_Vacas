#line 1 "scanner.cpp"

#line 3 "scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 83
#define YY_END_OF_BUFFER 84
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[399] =
    {   0,
        0,    0,   84,   82,   79,   81,   80,   72,   82,   55,
       82,   82,   59,   60,   76,   74,   53,   75,   54,   77,
        4,   65,   56,   67,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   51,   52,   78,   61,   82,   62,    0,   64,    0,
        0,    8,   70,    0,   57,   58,    0,    0,    4,    0,
       66,   63,   68,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   26,
       50,   50,   50,   50,   69,   71,   73,    6,    0,    2,

        5,    0,    0,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
        3,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   28,   50,   50,   50,   50,   50,
       50,   50,   50,   27,   50,   50,    7,   50,   50,   22,
       50,   50,   50,   50,   50,   16,   50,   50,   50,   50,
       50,   11,   50,   50,    7,    7,   50,   33,   50,   50,

       50,   50,   50,   49,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   14,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   10,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   30,   50,   50,   50,   50,   36,
       15,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   35,    1,   50,   50,   50,
       20,   50,   19,   29,   50,   50,   50,   50,   50,   50,
       12,   13,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   17,   50,   24,   31,   50,   50,   50,   50,   23,

       50,   50,   50,   50,   32,   50,   34,   50,   50,   50,
       50,   50,   50,   50,   50,   50,    9,   21,   50,   50,
       50,    7,   50,   50,   50,   50,   50,   50,   39,   50,
       50,   50,   50,   50,   50,   48,   50,   50,   50,   50,
       42,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   40,   50,   50,   50,   50,   45,   18,   50,
       50,   50,   38,   50,   50,   50,   50,   50,   50,   50,
       50,   41,   50,   50,   50,   47,   37,   44,   50,   50,
       43,   50,   50,   50,   50,   50,   50,   50,   25,   50,
       50,   50,   50,   50,   50,   50,   46,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    1,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,    1,    1,   19,
       20,   21,    1,    1,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       32,   38,   39,   40,   41,   42,   32,   43,   32,   32,
       44,    1,   45,   46,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   32,   58,   59,   60,
       61,   62,   32,   63,   64,   65,   66,   67,   32,   68,
       32,   32,   69,   70,   71,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   32,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   32,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   32,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[72] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    1,    1,
        4,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    1,    1,
        1
    } ;

static const flex_int16_t yy_base[405] =
    {   0,
        0,    0,  230, 1597, 1597, 1597, 1597,   64,  203, 1597,
      189,    0, 1597, 1597, 1597,  183, 1597,  173, 1597,  168,
       57,   59,  164,  154,   58,   59,   64,   62,   72,   69,
       63,  106,  108,   71,  115,   90,  139,  112,  142,  128,
      164, 1597, 1597, 1597, 1597,   88, 1597,  144, 1597,   79,
      141, 1597, 1597,  135, 1597, 1597,  136,  117,   67,   98,
     1597, 1597, 1597,  118,  123,  145,  132,  163,  176,  195,
      186,  189,  175,  208,  188,  200,  201,  232,  214,  226,
      242,  244,  238,  256,  231,  257,  258,  272,  281,  279,
      283,  302,  304,  299, 1597, 1597, 1597, 1597,  100, 1597,

       83,   79,   78,  211,  298,  305,  315,  338,  336,  341,
      329,  342,  347,  356,  353,  352,  361,  354,  378,  384,
      391,  379,  380,  397,  403,  404,  401,  417,  415,  440,
      443,  416,  406,  429,  442,  447,  457,  475,  481,  461,
     1597,  479,  487,  495,  484,  496,  498,  511,  489,  521,
      515,  520,  534,  538,  522,  547,  545,  553,  557,  548,
      572,  570,  580,  575,  253,  579,  602,  605,  591,  594,
      615,  607,  614,  478,  630,  621,  597,  624,  637,  633,
      647,  640,  656,  661,  670,  649,  675,  658,  677,  701,
      700,  668,  684,  681,  674,  679,  711,  695,  716,  722,

      739,  736,  744,  720,  725,  755,  742,  747,  758,  766,
      772,  777,  761,  783,  791,  803,  799,  805,  802,  764,
      821,  804,  816,  830,  827,  839,  837,  852,  836,  840,
      867,  864,  861,  871,  874,  876,  888,  892,  894,  910,
      895,  898,  920,  915,  902,  928,  932,  942,  935,  925,
      929,  951,  953,  955,  970,  975,  977,  972,  978,  968,
      981,  992, 1003, 1016, 1008,  995, 1002, 1013, 1018, 1025,
     1011, 1036, 1027, 1033, 1038, 1044, 1050, 1051, 1052, 1074,
     1039, 1058, 1063, 1082, 1085, 1088, 1077, 1084, 1100, 1107,
     1118, 1093, 1119, 1121, 1094, 1124, 1131, 1133, 1132, 1128,

     1144, 1158, 1154, 1149, 1152, 1159, 1155, 1174, 1175, 1177,
     1185, 1180, 1202, 1207, 1190, 1200, 1192, 1211, 1216, 1220,
     1217, 1226, 1232, 1227, 1228, 1242, 1244, 1253, 1241, 1243,
     1265, 1263, 1268, 1278, 1283, 1269, 1281, 1279, 1285, 1289,
     1288, 1301, 1315, 1322, 1316, 1326, 1337, 1319, 1342, 1340,
     1346, 1309, 1343, 1356, 1354, 1359, 1362, 1363, 1365, 1370,
     1368, 1393, 1377, 1389, 1395, 1404, 1396, 1410, 1416, 1421,
     1419, 1414, 1429, 1426, 1440, 1431, 1442, 1447, 1453, 1462,
     1451, 1452, 1463, 1454, 1477, 1467, 1486, 1479, 1473, 1478,
     1498, 1488, 1510, 1505, 1516, 1519, 1500, 1597, 1581, 1585,

       89, 1589, 1593,   75
    } ;

static const flex_int16_t yy_def[405] =
    {   0,
      398,    1,  398,  398,  398,  398,  398,  398,  399,  398,
      398,  400,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      399,  398,  398,  398,  398,  398,  402,  398,  398,  403,
      398,  398,  398,  404,  401,  401,  404,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  398,  398,  398,  398,  402,  398,

      398,  403,  403,  404,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      398,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,

      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,

      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,    0,  398,  398,

      398,  398,  398,  398
    } ;

static const flex_int16_t yy_nxt[1669] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   34,   34,   35,   36,   34,   37,   38,   39,   40,
       34,   41,   34,   42,   43,   44,    4,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   34,   35,   36,
       34,   37,   38,   39,   40,   34,   41,   34,   45,   46,
       47,   48,   58,   60,   59,   64,   64,  104,   61,   64,
       64,   64,   58,   49,   59,   69,   64,   73,   64,   64,
       77,   65,  103,  103,   68,   66,   70,   74,  141,   71,

      101,   72,  100,   78,   67,   67,   75,   64,   67,   67,
       67,   69,  103,   73,   76,   67,   77,   67,   67,   68,
       66,   70,   74,   64,   71,   64,   72,   79,   78,   64,
       84,   75,   64,   50,  101,   64,   67,   88,  100,   76,
       64,   80,   81,   98,   82,   64,   52,   89,   97,   64,
       83,   96,   67,   79,   67,   84,   64,   95,   67,   64,
       85,   67,   64,   88,   67,   92,   80,   81,  105,   67,
       82,   90,   89,   63,   67,   83,   86,   91,   67,   87,
       64,   64,  106,   62,   57,   67,   85,   56,   67,   93,
       92,   67,   64,   64,  105,   55,   53,   90,  107,   94,

      108,   86,   91,   64,   87,   64,   64,  106,   52,   67,
       67,  114,   64,  109,  113,   93,  110,   64,   64,  111,
      112,   67,   67,  107,   94,   64,  108,  116,   64,  398,
      115,   64,   67,  118,   67,   67,  114,  120,  109,  117,
      113,   67,  110,   64,  111,  112,   67,   67,   64,   64,
      398,  398,  116,  119,   67,   64,  115,   67,  118,   64,
       67,   64,  121,  120,  117,  122,  398,  398,  127,  124,
       64,  123,   67,   64,   64,   64,  125,   67,   67,  119,
      130,  126,  398,  398,   67,  398,  128,  121,   67,   64,
       67,  122,  129,  127,  398,  124,   64,  123,   64,   67,

       64,  125,   67,   67,   67,  136,  130,  126,  131,  398,
      132,  133,  128,  135,  134,   64,   64,  129,   67,   64,
      398,   64,   64,  137,  398,   67,  142,   67,  140,   67,
      143,  136,   64,  131,  398,  132,  133,  398,  135,  134,
      398,  139,  138,  398,   67,   67,   64,  144,   67,  137,
       67,   67,  142,   64,  140,   64,  143,  146,   64,   64,
      398,   67,  398,  145,   64,  148,  139,  138,  151,   64,
       64,   64,  144,   64,  398,   67,  398,  154,   64,  147,
      149,  150,   67,  146,   67,  153,  155,   67,   67,  145,
      148,  152,  156,   67,  151,   64,   64,   64,   67,   67,

       67,   64,   67,  154,  147,  149,  150,   67,   64,  158,
      153,  160,  155,  398,   64,  157,  152,  156,   64,  161,
       64,   64,  165,   64,   67,   67,   67,  398,  159,  398,
       67,  162,   64,   64,   64,  158,  160,   67,  398,  398,
      157,  172,  163,   67,  161,  164,   64,   67,  165,   67,
       67,  166,   67,  159,  168,  171,  162,   64,  167,   64,
       64,   67,   67,   67,   64,  173,  172,  163,  170,  398,
      164,  398,  169,  398,   64,   67,  166,  174,   64,  168,
      171,  398,  398,  167,  175,  180,   67,  398,   67,   67,
      173,  176,   64,   67,  170,   64,   64,  169,   64,  398,

      177,   64,  174,   67,   64,  178,   64,   67,  181,  175,
      179,  180,   64,   64,  182,   64,  176,  398,  184,  185,
      183,   67,  398,  186,   67,   67,  177,   67,   64,  188,
       67,  178,   64,   67,  181,   67,  179,   64,   64,   64,
      182,   67,   67,  184,   67,  185,  183,  398,  187,  186,
      189,   64,  190,  398,  188,   64,  194,   67,  191,  192,
      398,   67,   64,  398,   64,   64,   67,   67,   67,  197,
       64,  398,  195,  187,   64,  193,  189,  190,  398,  398,
       67,  194,  196,  191,   67,  192,  199,   64,  200,   64,
      198,   67,   64,   67,   67,  197,   64,   64,  195,   67,

      193,  201,  205,   67,  398,  398,  398,  196,   64,  202,
      204,   64,  199,  200,   64,  198,   67,  203,   67,   64,
      208,   67,   64,  206,   64,   67,   67,  201,  205,  398,
      207,   64,   64,  209,  202,  204,  210,   67,   64,  212,
       67,   64,  203,   67,  211,  215,  208,   64,   67,  206,
       64,   67,  398,   67,   64,  213,  207,   64,  209,  214,
       67,   67,  210,  216,   64,  212,   64,   67,  398,  211,
       67,  215,  218,   64,  398,   64,   67,  219,   64,   67,
      398,  213,  220,   67,  214,   64,   67,   64,  217,  216,
      223,   64,   64,   67,   64,   67,   64,  218,   64,  398,

      398,   64,   67,  219,   67,  231,  398,   67,  220,  221,
      222,  224,   64,  217,   67,  223,   67,   64,   64,  230,
       67,   67,  225,   67,  226,   67,  227,   67,   64,  229,
       67,  231,  232,   64,  221,  222,  224,   64,  228,   64,
      398,   67,   64,  398,  230,  398,   67,   67,  225,  233,
      226,  234,  227,   64,  238,  229,   64,   67,  232,   64,
      235,   64,   67,  228,   64,  237,   67,  398,   67,  240,
      241,   67,   64,  236,  233,   64,  398,  234,   64,  239,
      238,   64,   67,   64,  398,   67,  235,  242,   67,   64,
       67,  237,  398,   67,   64,  240,  241,  398,  236,  246,

       64,   67,  398,  243,   67,  239,  244,   67,   64,  247,
       67,  398,   67,  242,  245,  248,   64,  398,   67,   64,
       64,   64,   64,   67,  246,  398,  254,  398,  243,   67,
      398,  244,  249,   64,  250,  247,  252,   67,   64,  245,
      251,  248,  398,  398,   64,   67,  253,   64,   67,   67,
       67,   67,  254,   64,   64,  255,   64,   64,  249,  250,
      398,  252,   67,  398,  257,  251,  398,   67,  398,   64,
      256,  260,  253,   67,  258,  262,   67,  261,   64,  259,
      255,   64,   67,   67,   64,   67,   67,  398,   64,  257,
      265,   64,  263,   64,  398,  256,  260,  268,   67,  258,

      262,  264,  398,  261,  259,   64,  267,   67,  266,   64,
       67,   64,   64,   67,  398,   64,  265,   67,  263,   64,
       67,  398,   67,  268,  398,  269,  264,   64,  270,  271,
      273,  267,   64,  266,   67,  274,  276,   64,   67,  272,
       67,   67,   64,  275,   67,   64,   64,  398,   67,   64,
      269,  277,   64,  270,  271,  273,   67,  278,  280,   64,
      274,   67,  276,  398,  398,  272,   67,  279,   64,  275,
       64,   67,   64,  398,   67,   67,  283,  277,   67,  398,
      398,   67,  398,  278,  280,   64,  281,   64,   67,   64,
      282,  284,   64,  279,   64,   64,  285,   67,   64,   67,

      286,   67,  283,  288,  398,  398,  287,  289,  290,   64,
      398,  281,   64,  291,   67,  282,   67,  284,   67,   64,
       64,   67,  285,   67,   67,   64,  286,   67,   64,  288,
       64,  287,  289,   64,  290,   64,  398,  293,   67,  291,
      292,   67,   64,  398,   64,  294,  297,  398,   67,   67,
       64,  295,  296,   64,   67,   64,   64,   67,  398,   67,
      298,   64,   67,  293,   67,  292,  398,   64,   64,   64,
      294,   67,  297,   67,  398,   64,  295,  296,  299,   67,
       64,  300,   67,  398,   67,   67,  298,  301,  302,  303,
       67,   64,  398,  398,   64,  304,   67,   67,   67,   64,

      305,   64,   64,  299,   67,   64,  300,  309,  398,   67,
       64,   64,  301,  302,  303,  398,  308,   64,  310,  306,
       67,  304,  307,   67,   64,  305,  398,  398,   67,  398,
       67,   67,  312,  309,   67,   64,   64,  311,   64,   67,
       67,   64,  308,  310,  306,   64,   67,  307,   64,   64,
       64,  398,  398,   67,  398,  313,  314,  319,  312,  316,
      315,   64,  311,  317,   67,   67,   64,   67,  318,   64,
       67,   64,   64,  320,   67,   64,   64,   67,   67,   67,
      313,  314,  324,  319,  316,  315,  323,  321,  317,  322,
       67,   64,   64,  318,   64,   67,  398,   64,   67,  320,

       67,   67,   64,  325,   67,   67,  328,   64,  324,   64,
      398,  323,  398,  321,  322,  326,  327,   64,  398,   64,
       67,   67,  329,   67,   64,  330,   67,  332,   64,  325,
      331,   67,  328,   64,   64,  398,   67,   64,   67,  333,
      326,  327,  335,   64,   64,   64,   67,  329,   67,   64,
      334,  330,  332,   67,  336,  337,  331,   67,   64,   64,
       64,   64,   67,   67,  333,  341,   67,  338,  335,  339,
       64,  398,   67,   67,   67,  334,  340,  342,   67,  336,
       64,  337,   64,  343,  345,   64,   64,   67,   67,   67,
       67,  341,  338,  344,  339,   64,   64,  346,   64,   67,

       64,  340,   64,  342,  350,   64,   64,  398,  343,   67,
      345,   67,  348,  398,   67,   67,  398,  347,   64,  344,
      351,  349,  353,  346,   67,   67,   64,   67,  352,   67,
      350,   67,   64,   64,   67,   67,   64,  398,  348,   64,
      354,  398,  347,   64,  363,  351,  349,   67,  353,  398,
      356,  355,  357,  352,   64,   67,  359,   64,  358,   64,
       64,   67,   67,   64,  398,   67,  354,  360,   67,  363,
      362,   64,   67,   64,  361,  356,   64,  355,  357,   64,
       64,  359,   64,   67,  358,   64,   67,   64,   67,   67,
      364,  367,   67,  360,   64,  365,  362,  366,  398,  361,

       67,  398,   67,  398,  368,   67,   64,  369,   67,   67,
       64,   67,   64,   64,   67,  364,   67,  367,  370,  374,
      365,   64,  366,   67,  398,  373,  398,   64,  371,  368,
      372,   64,  369,   64,  398,   67,   64,  376,   64,   67,
      378,   67,   67,   64,  370,  374,   64,  380,   64,  375,
       67,  373,  379,  371,  398,  372,   67,   64,  377,   64,
       67,  381,   67,  376,   64,   67,  378,   67,   64,   64,
       64,   64,   67,  380,  375,   67,  382,   67,  379,   64,
       64,  384,  398,  377,   64,  383,   67,  381,   67,  386,
       64,  398,  385,   67,   64,   64,   64,   67,   67,   67,

       67,  388,  382,   64,  390,   64,  398,  384,   67,   67,
      398,  383,  387,   67,  386,   64,  391,   64,  385,   67,
      389,  392,   64,   67,   67,   67,  388,   64,  393,  398,
      390,  398,   67,   64,   67,  394,   64,  387,  398,  395,
      397,  391,  398,  398,   67,  389,   67,  392,  398,  398,
      398,   67,  398,  393,  398,  396,   67,  398,  398,  398,
      398,  394,   67,  398,  395,   67,  397,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      396,   51,   51,   51,   51,   54,  398,   54,   54,   99,
       99,   99,   99,  102,  102,  102,    3,  398,  398,  398,

      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398
    } ;

static const flex_int16_t yy_chk[1669] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    8,   21,   22,   21,   25,   26,  404,   22,   28,
       31,   27,   59,    8,   59,   27,   30,   28,   34,   29,
       30,  401,  103,  102,   26,   25,   27,   28,  103,   27,

      101,   27,   99,   31,   25,   26,   29,   36,   28,   31,
       27,   27,   60,   28,   29,   30,   30,   34,   29,   26,
       25,   27,   28,   32,   27,   33,   27,   32,   31,   38,
       36,   29,   35,    8,   58,   64,   36,   38,   57,   29,
       65,   33,   33,   54,   35,   40,   51,   38,   50,   67,
       35,   48,   32,   32,   33,   36,   37,   46,   38,   39,
       37,   35,   66,   38,   64,   40,   33,   33,   66,   65,
       35,   39,   38,   24,   40,   35,   37,   39,   67,   37,
       68,   41,   66,   23,   20,   37,   37,   18,   39,   41,
       40,   66,   73,   69,   66,   16,   11,   39,   68,   41,

       69,   37,   39,   71,   37,   75,   72,   66,    9,   68,
       41,   73,   70,   69,   72,   41,   70,   76,   77,   71,
       71,   73,   69,   68,   41,   74,   69,   75,  104,    3,
       74,   79,   71,   77,   75,   72,   73,   79,   69,   76,
       72,   70,   70,   80,   71,   71,   76,   77,   85,   78,
        0,    0,   75,   78,   74,   83,   74,  104,   77,   81,
       79,   82,   80,   79,   76,   81,    0,    0,   85,   82,
      165,   81,   80,   84,   86,   87,   83,   85,   78,   78,
       87,   84,    0,    0,   83,    0,   86,   80,   81,   88,
       82,   81,   86,   85,    0,   82,   90,   81,   89,  165,

       91,   83,   84,   86,   87,   91,   87,   84,   88,    0,
       88,   88,   86,   90,   89,  105,   94,   86,   88,   92,
        0,   93,  106,   92,    0,   90,  105,   89,   94,   91,
      106,   91,  107,   88,    0,   88,   88,    0,   90,   89,
        0,   93,   92,    0,  105,   94,  111,  107,   92,   92,
       93,  106,  105,  109,   94,  108,  106,  109,  110,  112,
        0,  107,    0,  108,  113,  111,   93,   92,  113,  116,
      115,  118,  107,  114,    0,  111,    0,  116,  117,  110,
      112,  112,  109,  109,  108,  115,  117,  110,  112,  108,
      111,  114,  118,  113,  113,  119,  122,  123,  116,  115,

      118,  120,  114,  116,  110,  112,  112,  117,  121,  120,
      115,  122,  117,    0,  124,  119,  114,  118,  127,  123,
      125,  126,  127,  133,  119,  122,  123,    0,  121,    0,
      120,  124,  129,  132,  128,  120,  122,  121,    0,    0,
      119,  133,  125,  124,  123,  126,  134,  127,  127,  125,
      126,  128,  133,  121,  129,  132,  124,  130,  128,  135,
      131,  129,  132,  128,  136,  134,  133,  125,  131,    0,
      126,    0,  130,    0,  137,  134,  128,  135,  140,  129,
      132,    0,    0,  128,  136,  140,  130,    0,  135,  131,
      134,  137,  138,  136,  131,  174,  142,  130,  139,    0,

      138,  145,  135,  137,  143,  139,  149,  140,  142,  136,
      139,  140,  144,  146,  143,  147,  137,    0,  145,  146,
      144,  138,    0,  147,  174,  142,  138,  139,  148,  149,
      145,  139,  151,  143,  142,  149,  139,  152,  150,  155,
      143,  144,  146,  145,  147,  146,  144,    0,  148,  147,
      150,  153,  151,    0,  149,  154,  155,  148,  152,  153,
        0,  151,  157,    0,  156,  160,  152,  150,  155,  157,
      158,    0,  156,  148,  159,  154,  150,  151,    0,    0,
      153,  155,  156,  152,  154,  153,  159,  162,  160,  161,
      158,  157,  164,  156,  160,  157,  166,  163,  156,  158,

      154,  161,  166,  159,    0,    0,    0,  156,  169,  162,
      164,  170,  159,  160,  177,  158,  162,  163,  161,  167,
      169,  164,  168,  167,  172,  166,  163,  161,  166,    0,
      168,  173,  171,  170,  162,  164,  171,  169,  176,  173,
      170,  178,  163,  177,  172,  178,  169,  175,  167,  167,
      180,  168,    0,  172,  179,  175,  168,  182,  170,  176,
      173,  171,  171,  179,  181,  173,  186,  176,    0,  172,
      178,  178,  182,  183,    0,  188,  175,  183,  184,  180,
        0,  175,  184,  179,  176,  192,  182,  185,  181,  179,
      188,  195,  187,  181,  189,  186,  196,  182,  194,    0,

        0,  193,  183,  183,  188,  194,    0,  184,  184,  185,
      187,  189,  198,  181,  192,  188,  185,  191,  190,  193,
      195,  187,  190,  189,  190,  196,  190,  194,  197,  191,
      193,  194,  197,  199,  185,  187,  189,  204,  190,  200,
        0,  198,  205,    0,  193,    0,  191,  190,  190,  199,
      190,  200,  190,  202,  205,  191,  201,  197,  197,  207,
      201,  203,  199,  190,  208,  203,  204,    0,  200,  207,
      208,  205,  206,  202,  199,  209,    0,  200,  213,  206,
      205,  220,  202,  210,    0,  201,  201,  209,  207,  211,
      203,  203,    0,  208,  212,  207,  208,    0,  202,  213,

      214,  206,    0,  210,  209,  206,  211,  213,  215,  214,
      220,    0,  210,  209,  212,  215,  217,    0,  211,  219,
      216,  222,  218,  212,  213,    0,  222,    0,  210,  214,
        0,  211,  216,  223,  217,  214,  219,  215,  221,  212,
      218,  215,    0,    0,  225,  217,  221,  224,  219,  216,
      222,  218,  222,  229,  227,  223,  226,  230,  216,  217,
        0,  219,  223,    0,  225,  218,    0,  221,    0,  228,
      224,  227,  221,  225,  226,  229,  224,  228,  233,  226,
      223,  232,  229,  227,  231,  226,  230,    0,  234,  225,
      233,  235,  231,  236,    0,  224,  227,  236,  228,  226,

      229,  232,    0,  228,  226,  237,  235,  233,  234,  238,
      232,  239,  241,  231,    0,  242,  233,  234,  231,  245,
      235,    0,  236,  236,    0,  237,  232,  240,  238,  239,
      241,  235,  244,  234,  237,  242,  244,  243,  238,  240,
      239,  241,  250,  243,  242,  246,  251,    0,  245,  247,
      237,  246,  249,  238,  239,  241,  240,  247,  249,  248,
      242,  244,  244,    0,    0,  240,  243,  248,  252,  243,
      253,  250,  254,    0,  246,  251,  254,  246,  247,    0,
        0,  249,    0,  247,  249,  260,  252,  255,  248,  258,
      253,  255,  256,  248,  257,  259,  256,  252,  261,  253,

      257,  254,  254,  259,    0,    0,  258,  260,  261,  262,
        0,  252,  266,  262,  260,  253,  255,  255,  258,  267,
      263,  256,  256,  257,  259,  265,  257,  261,  271,  259,
      268,  258,  260,  264,  261,  269,    0,  264,  262,  262,
      263,  266,  270,    0,  273,  265,  270,    0,  267,  263,
      274,  268,  269,  272,  265,  275,  281,  271,    0,  268,
      272,  276,  264,  264,  269,  263,    0,  277,  278,  279,
      265,  270,  270,  273,    0,  282,  268,  269,  275,  274,
      283,  276,  272,    0,  275,  281,  272,  277,  278,  279,
      276,  280,    0,    0,  287,  280,  277,  278,  279,  284,

      283,  288,  285,  275,  282,  286,  276,  287,    0,  283,
      292,  295,  277,  278,  279,    0,  286,  289,  288,  284,
      280,  280,  285,  287,  290,  283,    0,    0,  284,    0,
      288,  285,  290,  287,  286,  291,  293,  289,  294,  292,
      295,  296,  286,  288,  284,  300,  289,  285,  297,  299,
      298,    0,    0,  290,    0,  291,  293,  299,  290,  296,
      294,  301,  289,  297,  291,  293,  304,  294,  298,  305,
      296,  303,  307,  301,  300,  302,  306,  297,  299,  298,
      291,  293,  306,  299,  296,  294,  304,  302,  297,  303,
      301,  308,  309,  298,  310,  304,    0,  312,  305,  301,

      303,  307,  311,  308,  302,  306,  311,  315,  306,  317,
        0,  304,    0,  302,  303,  309,  310,  316,    0,  313,
      308,  309,  312,  310,  314,  313,  312,  315,  318,  308,
      314,  311,  311,  319,  321,    0,  315,  320,  317,  316,
      309,  310,  320,  322,  324,  325,  316,  312,  313,  323,
      319,  313,  315,  314,  321,  323,  314,  318,  329,  326,
      330,  327,  319,  321,  316,  327,  320,  324,  320,  325,
      328,    0,  322,  324,  325,  319,  326,  328,  323,  321,
      332,  323,  331,  330,  332,  333,  336,  329,  326,  330,
      327,  327,  324,  331,  325,  334,  338,  333,  337,  328,

      335,  326,  339,  328,  338,  341,  340,    0,  330,  332,
      332,  331,  335,    0,  333,  336,    0,  334,  342,  331,
      339,  337,  342,  333,  334,  338,  352,  337,  340,  335,
      338,  339,  343,  345,  341,  340,  348,    0,  335,  344,
      343,    0,  334,  346,  352,  339,  337,  342,  342,    0,
      345,  344,  346,  340,  347,  352,  348,  350,  347,  349,
      353,  343,  345,  351,    0,  348,  343,  349,  344,  352,
      351,  355,  346,  354,  350,  345,  356,  344,  346,  357,
      358,  348,  359,  347,  347,  361,  350,  360,  349,  353,
      354,  357,  351,  349,  363,  355,  351,  356,    0,  350,

      355,    0,  354,    0,  360,  356,  364,  361,  357,  358,
      362,  359,  365,  367,  361,  354,  360,  357,  362,  367,
      355,  366,  356,  363,    0,  366,    0,  368,  364,  360,
      365,  372,  361,  369,    0,  364,  371,  369,  370,  362,
      371,  365,  367,  374,  362,  367,  373,  374,  376,  368,
      366,  366,  373,  364,    0,  365,  368,  375,  370,  377,
      372,  375,  369,  369,  378,  371,  371,  370,  381,  382,
      379,  384,  374,  374,  368,  373,  379,  376,  373,  380,
      383,  382,    0,  370,  386,  380,  375,  375,  377,  384,
      389,    0,  383,  378,  385,  390,  388,  381,  382,  379,

      384,  386,  379,  387,  388,  392,    0,  382,  380,  383,
        0,  380,  385,  386,  384,  391,  390,  397,  383,  389,
      387,  391,  394,  385,  390,  388,  386,  393,  392,    0,
      388,    0,  387,  395,  392,  393,  396,  385,    0,  394,
      396,  390,    0,    0,  391,  387,  397,  391,    0,    0,
        0,  394,    0,  392,    0,  395,  393,    0,    0,    0,
        0,  393,  395,    0,  394,  396,  396,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      395,  399,  399,  399,  399,  400,    0,  400,  400,  402,
      402,  402,  402,  403,  403,  403,  398,  398,  398,  398,

      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[84] =
    {   0,
0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexico.l"
#line 4 "lexico.l"
#include <cstdlib>
#include "parser.h"
#include <QString>
#include <stdio.h>
#include <iostream>
#include <NodoAST.h>
#include "qlist.h"

int yylex();
void yyerror(const char *s);
int linea=0; // Para contar lineas
int columna = 1; // para las columnas
int anterior = 0;
NodoAST *raiz;
#line 989 "scanner.cpp"
#line 990 "scanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 37 "lexico.l"

#line 1207 "scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 399 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1597 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 38 "lexico.l"

	YY_BREAK

case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 40 "lexico.l"
{linea++;columna = 0;}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 41 "lexico.l"
{}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 42 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return numero;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 43 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return decimal;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 44 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return caracter;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 45 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return booleano;}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 46 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return cadena;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 47 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pprincipal;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 48 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pint;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 49 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pdouble;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 50 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pbool;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 51 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pchar;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 52 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pstring;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 53 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return parreglo;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 54 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pclase;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 55 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pextender;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 56 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return psobrescribir;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 57 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return ppublico;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 58 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pprivado;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 59 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pprotegido;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 60 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pvoid;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 61 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pretornar;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 62 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pimprimir;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 63 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pmostrarnotificacion;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 64 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return psi;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 65 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return psino;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 66 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return ppara;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 67 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return prepetir;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 68 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return promper;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 69 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pmientras;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 70 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcomprobar;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 71 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return phacer;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 72 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcontinuar;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 73 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pincluir;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 74 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return parchivo;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 75 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcreararchivoder;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 76 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcrearconjunto;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 77 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcrearregex;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 78 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcrearentrada;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 79 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pguardararchivo;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 80 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pcrearcuenta;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 81 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pverificarcuenta;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 82 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pdepositarcuenta;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 83 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return prestarcuenta;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 84 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pimprimirtransaccionescuenta;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 85 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pconsultarcuenta;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 86 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return ptransferir;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 87 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return pnew;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 88 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return id;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 89 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return abrir_corchete;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 90 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return cerrar_corchete;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 91 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return coma;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 92 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return punto;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 93 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return finalizacion;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 94 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return igual;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 95 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return aumento;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 96 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return decremento;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 97 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return abrir_parentesis; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 98 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return cerrar_parentesis; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 99 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return abrir_llave;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 100 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return cerrar_llave;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 101 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return igual_igual;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 102 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return diferente_de;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 103 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return menor_que;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 104 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return menorigual_que;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 105 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return mayor_que;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 106 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return mayorigual_que;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 107 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return opor;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 108 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return opand;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 109 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return opnand;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 110 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return opnot;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 111 "lexico.l"
{ columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return opnor;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 112 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return suma; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 113 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return resta; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 114 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return multi; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 115 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return division; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 116 "lexico.l"
{   columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext); return potencia; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 117 "lexico.l"
{
                    strcpy(yylval.TEXT, yytext); columna=26;
                }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 120 "lexico.l"
{ columna++; }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 121 "lexico.l"
{linea++; columna = 0; anterior = 0;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 122 "lexico.l"
{
                    columna=columna+ anterior;  anterior = strlen(yytext);strcpy(yylval.TEXT, yytext);
/*                    errorT *nuevoE = new errorT("Lexico",yytext,linea, columna);
                    listaErrores->append(*nuevoE);
*/
                    std::cout <<yytext <<" Error Lexico en la linea "<< linea << " Columna:"<< columna<<  std::endl;
                }
	YY_BREAK

case 83:
YY_RULE_SETUP
#line 130 "lexico.l"
ECHO;
	YY_BREAK
#line 1703 "scanner.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 399 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 399 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 398);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 130 "lexico.l"


